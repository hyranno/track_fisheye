

fish_eyeパターン
  中心点対称
  中心を通る線での断面パターンが全て相似になる
  同心円とか、QRコードの端の四角とか
  先行研究に倣いfish_eyeと呼ぶ

バーコードを3つ置いて三角から位置や角度を求める
  1つでも中心を通る線分の最長、最短から位置、ピッチ、ヨーを求められそうだが計算量で不利か

トラッキング用マーカー
  四角形の乱数列fish_eyeパターンを基本とする
  4つの領域からなる
    fish_eyeパターンを左上、正負反転したパターンを右上と左下に配置
    右下にはID情報を配置
  正/負のパターンを別々に検出
    サイズごとにconvolutionする場合
      計算量が大きい
      サイズごとに並列化もできるがメモリ消費量が大きい
    白黒の境界を検出する場合(opencv同様)
      計算量が小さい
      ノイズやオクルージョンに弱い
  パターン位置からマーカーの検出
    正,負のパターン中心をつないだ線で、パターンが連続する
  アフィン変換してIDを読む

パターン3点から回転、拡大縮小の推定(Orghogonal)
  //無回転での座標は正パターン(0,0,0)と負パターン(1,0,0),(0,1,0)とする。法線は(0,0,1)
  正パターンが(0,0)に来るよう平行移動し、負パターンの座標(x1,y1),(x2,y2)を得たとき
    src1 : [x1, y1, sqrt(1-(x1^2+y1^2)/(c^2))] /* +-sqrt() */
    src2 : [x2, y2, sqrt(1-(x2^2+y2^2)/(c^2))]
    c = sqrt(
      (
        sqrt(
          x1^4 +x2^4 +y1^4 +y2^4
          +2*x1^2*x2^2
          +(2*x1^2-2*x2^2)*y1^2
          +(2*y1^2+2*x2^2-2*x1^2)*y2^2
          +8*x1*x2*y1*y2
        ) +y2^2 +y1^2 +x2^2 +x1^2
      )/2
    )
    法線はcros(src1, src2)を正規化
    拡大縮小(カメラからの距離)はc
  回転行列(DCM)にしてquaternionに変換
    DCM = matrix(
      [x1/c, x2/c, cros(src1,src2)[1]/c^2],
      [y1/c, y2/c, cros(src1,src2)[2]/c^2],
      [z1/c, z2/c, cros(src1,src2)[3]/c^2],
    )



パターン3点から回転、平行移動の推定(perspective)
3次元座標(カメラ座標)を(x,y,z)、画像上の座標を(X,Y)で表す
無移動、無回転での座標は正パターン(0,0,0)と負パターン(c,0,0), (0,c,0)とする。法線は(0,0,-1)
画像から正パターンP0=(X0,Y0)、負パターンP1=(X1,Y1), P2=(X2,Y2)を得たとき
perspective
  カメラの光学中心からスクリーンまでの距離をfとする
  画像上の座標との対応 X = x * (f/z)






規格に準拠しないQRコード
  特許権(多くは期限切れ)を行使される可能性がある
  「QRコード」と呼称できない

OpenCVでのQRコード検出実装
  白黒の境界を検出し、その比によってfish_eyeパターンを検出する
  3点の配置を推定するのに「直角に近いものが左上」を使うので3次元回転に弱い?
