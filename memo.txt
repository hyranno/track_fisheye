poetry run python <filename>

似非QRコードの高速姿勢トラッキング

x-meansのGPU実装は作業量が重いし本筋でもないので後でやるか

TODO:
  python
    cv2.Mat <-> GPUTexture
    show GPUTexture
    関数にまとめる
  wgsl
    image result of pattern detection
      preprocess image
        grayscale
        adoptive smooth threshold
          gaussian filter
            vertical
            horizontal
          smooth_threshold
      match multi scale
        [0,1] -> [-1, 1]
        convolution
        threshold
        or (other size)
      and (vertical, horizontal)(positive, negative)
    points result of pattern detection
      collect positive, negative
      x-mean clustering (positive, negative) by pyclustering
    marker detection
      make pairs of position + 2 rotation
        convolution 1d on texture between position-rotation
        pick 2 max
        filter (threshold < 2 max)
  python
    marker to quaternion + translation
    計算結果の表示
  似非コードの印刷と撮影
  //
  リファクタリング
  x-mean のwgpu実行
    分割に最小距離条件も加えたい
  orthogonalに近似せずperspectiveのまま計算
  python - wgpu を ProtocolBuffer あたりでラップできないか?


リファクタリング
  match_result_integrate
    positiveをr, negativeをg に出力
  match1d_multi_scale
    各scaleを並列に処理
      shader.match1d
    maxをr, minをg のチャネルに集計
      shader.integrage_minmax
      入力テクスチャをarrayで受け取りたいが無理そうなので複数passで処理
        arrays of texture are not supported in current wgsl
  encoderをfinishしない

実装メモ
  z座標について
    z座標を得るには焦点距離などが必要
    既知でない場合はカメラキャリブレーションが必要になってくる
  match_multi_scale
    各scaleを並列に処理したい
      computeなら割といけそう
    別々のshaderに処理を分割してもよいか
      remap, filter_1d(convolution), threshold, boolean_ops
  wgpu.FilterMode.nearest が効いてない
  compute shader
    textureSampleが使えないのでテクスチャの任意の点を取るのが面倒くさい



Background
  マーカーの姿勢推定は、トラッキングや自己位置推定に有用
  マーカーを用いた姿勢推定はARToolkit等で提案されている
    マーカー検出処理のラベリングや輪郭検出あたりが重い
  fish eye パターンを用いたものも提案されている(論文)
    最大径を求める処理は重くないか?
  新しく高速なものを提案する
    QRコードに代表されるfish_eyeを利用する
    wgpuで並列化する


歪み補正
  レンズの歪みを補正し、ピンホールモデルにする?

マーカー仕様
  位置パターン + 姿勢パターン*2
    全マーカー共通でいいと思う
    位置と姿勢は正負反転
  id情報

パターンそれぞれの検出
  二値化
  縦横畳み込み
    小さいサイズの畳み込み結果がfalseのとき、次に大きいサイズの畳み込みを行う * 縦横
  縦横の結果をandする
  k-mean clustering?
  //
  k-mean clustering 以前は画素ごとに計算できる
    render bundleとして扱ってよいか?
      wgpu-native 未実装らしい

マーカーの検出と姿勢推定
  パターンが同一のマーカーに属するかの判定
    位置パターンと姿勢パターンの中心を線分でつなぎ、その上を補間しつつ畳み込み
    姿勢パターンxと姿勢パターンyについても一応確認してもよい
  x,yを得たら式に放り込んでquaternionと大きさを得る
    ピンホールモデルとorthogonalの違いに注意!!
